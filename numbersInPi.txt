Given a string representation of the first n digits of Pi and a list of your favorite 
numbers (all positive integers in string format), write a function that returns the 
smallest number of spaces that need to be added to the n digits of Pi such that all 
resulting numbers are found in the list of favorite numbers. If no number of spaces to be 
added exists such that all resulting numbers are found in the list of favorite numbers, 
the function should return -1.

Sample Input: "314159265 358979323846 26433832 79",["314159265358979323846", "26433", "8", "3279", "314159265", "35897932384626433832", "79"]

Sample Output: Sample output: 2 ("314159265 | 35897932384626433832 | 79")


3 213
Time -> O(N^3)
Space -> O(N + M)
main(pi, numbers){
  let numbersTable = {}
  for(let num of numbers ){
    numbersTable[num] = true
  }
  cache = {}
  helper()
  return cache[0] !== Infinity ? cache[0] : -1
}

helper(pi, numbersTable,cache, idx)
if(idx === pi.length) {
  return -1
}
if(idx in cache) return cache[idx]
let minSpaces = Infinity
for(let i = idx; i < pi.length; i++){
  let subString = pi.substr(0,i + 1)
  if(subString in numbersTable){
    let currMinSpaces = helper(pi,numbersTable,cache, i + 1)
    minSpaces = Math.min(currMinSpaces + 1, minSpaces )
  }
}

cache[idx] = minSpaces
return cache[idx]



function numbersInPi(pi,numbers){
  let numbersOfTable = {}
  for(let num of numbers){
    numbersOfTable[num] = true
  }
  cache = {}
  numbersInPiHelper(pi,numbersOfTable,cache,0)
  return cache[0] !== Infinity ? cache[0] : -1
}

function numbersInPiHelper(pi,numbersOfTable,cache,idx){
  if(idx === pi.length){
    return -1 
  }
  if(idx in cache) return cache[idx]
  let minSpace = Infinity
  
  for(let i = idx; i < pi.length; i++){
    let subString = pi.slice(idx, i + 1)
    if(subString in numbersOfTable){
      let currMinSpaces = numbersInPiHelper(pi,numbersOfTable,cache, i + 1)
      minSpace = Math.min(minSpace, currMinSpaces + 1)
    }
  }
  cache[idx] = minSpace
  return cache[idx]
}






function numbersInPi(pi,numbers){
  let numbersTable = {}
  for(let num of numbers){
    numbersTable[num] = true
  }
  
  cache = {}
  for(let i = pi.length - 1; i >= 0; i--){
    numbersInPiHelper(pi,numbersTable,cache,i)
  }
  
  return cache[0] !== Infinity ? cache[0] : -1
}

function numbersInPiHelper(pi,numbersTable,cache,idx){
  if(idx === pi.length){
    return -1
  }
  if(idx in cache){
    return cache[idx]
  }
  let minSpaces = Infinity
  for(let i = idx; i < pi.length; i++){
    let subString = pi.slice(idx, i + 1)
    if(subString in numbersTable){
      let currMinSpace = numbersInPiHelper(pi,numbersTable,cache, i + 1)
      minSpaces = Math.min(minSpaces, currMinSpace + 1)
    }
  }
  cache[idx] = minSpaces
  return cache[idx]
}































